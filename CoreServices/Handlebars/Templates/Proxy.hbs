/*
This file was generated and should not be modified directly
*/

namespace {{Namespace}}
{
    using System;
    using Bam.Net;
    using Bam.Net.ServiceProxy;
    using Bam.Net.ServiceProxy.Secure;
    using {{Namespace}}.Contracts;
{{#each Usings}}
{{this}}
{{/each}}

	public class {{TypeName}}Proxy: {{TypeName}}, IProxy {{Interfaces}}
	{
{{TypeName}}Client _proxyClient;
		public {{TypeName}}Proxy()
		{
			_proxyClient = new {{TypeName}}Client();
		}

		public {{TypeName}}Proxy(string baseUrl)
		{
			_proxyClient = new {{TypeName}}Client(baseUrl);
		}

		public ServiceProxyClient Client
		{
			get
			{
				return _proxyClient;
			}
		}

		public Type ProxiedType
		{
			get
			{
				return typeof({{TypeName}});
			}
		}

		public IApiKeyResolver ApiKeyResolver
		{
			get
			{
				return (IApiKeyResolver)_proxyClient.Property("ApiKeyResolver", false);
			}
			set
			{
				_proxyClient.Property("ApiKeyResolver", value, false);
			}
		}

		public IApplicationNameProvider ClientApplicationNameProvider
		{
			get
			{
				return (IApplicationNameProvider)_proxyClient.Property("ClientApplicationNameProvider", false);
			}
			set
			{
				_proxyClient.Property("ClientApplicationNameProvider", value, false);
			}
		}

		public void SubscribeToClientEvent(string eventName, EventHandler handler)
		{
			_proxyClient.Subscribe(eventName, handler);
		}

{{#each Methods}}
{{> ProxyMethod }}
{{/each}}

	}
}
